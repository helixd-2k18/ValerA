#version 460 core
#extension GL_GOOGLE_include_directive : require
#define GLSL

#include "../include/driver.hlsli"
#include "../include/bindings.hlsli"

#define LAUNCH_ID GlobalInvocationID

// Bugged Here, Disable...
float4 cbLoad(const int ID, in int2 samplep) {
    float4 center = superImageLoad(currImages[ID], samplep);
    float4 fixedt = center;
    int2 cxt = samplep + int2(1, 0);
    int2 cyt = samplep + int2(0, 1);
    float4 xt = superImageLoad(currImages[ID], cxt);
    float4 yt = superImageLoad(currImages[ID], cyt);
#ifndef HIGH_QUALITY_TRANSPARENCY
    if (dot(fixedt.xyz,1.f.xxx) < 0.0001f) { 
        if (dot(xt.xyz,1.f.xxx) > 0.0001f && dot(yt.xyz,1.f.xxx) > 0.0001f) { fixedt = .5f*(xt+ yt); } else 
                                                                            { fixedt =  max(xt, yt); };
    };
#endif
    //return max(fixedt, float4(0.f.xxx, 1.f));
    return fixedt;
};


// TODO: HLSL
#ifdef GLSL
layout ( local_size_x = 32u, local_size_y = 24u ) in; 
void main() 
#else
#endif
{

#ifdef GLSL
    const uint3 GlobalInvocationID = gl_GlobalInvocationID;
    const uint3 LocalInvocationID = gl_LocalInvocationID;
    const uint LocalInvocationIndex = gl_LocalInvocationIndex;
#endif

    const uint2 lanQ = LAUNCH_ID.xy;//gl_LaunchIDEXT.xy;//gl_GlobalInvocationID.xy;
    uint2 launchSize = imageSize(currImages[IW_POSITION]); launchSize.x >>= 2;

    // 
    const int2 curPixel = int2(lanQ), invPixel = int2(curPixel.x,curPixel.y);
    const int2 sizPixel = int2(launchSize);

    // WARNING! Quality may critically drop when move! 
    const bool checker = bool(((curPixel.x ^ curPixel.y) ^ (constants.rdata.x^1u))&1u);

    {   // 
        packed = packUint2x16(curPixel),       seed = uint2(packed, constants.rdata.x);
        const float2 shift = random2(seed),   pixel = float2(invPixel)+(shift*2.f-1.f)*0.25f+0.5f;
        //const float2 shift = 0.5f.xx,       pixel = float2(invPixel)+(shift*2.f-1.f)*0.25f+0.5f;

        // 
        float3 origin = screen2world(float3((float2(pixel)/float2(sizPixel))*2.f-1.f,0.001f));
        float3 target = screen2world(float3((float2(pixel)/float2(sizPixel))*2.f-1.f,0.999f));
        float3 raydir = normalize(target - origin);
        float3 normal = float3(0.f.xxx);
        float3 geonrm = float3(0.f.xxx);

        // Replacement for rasterization
        //XHIT RPM = traceRays(    origin.xyz,           (raydir), 10000.f, true, 0.001f);
        //XHIT RPM = rasterize(    origin.xyz,           (raydir), 10000.f, true, 0.001f);
        XHIT RPM; // currImages is Current Frame, prevImages is Previous Frame
        RPM.origin = superImageLoad(currImages[IW_POSITION], curPixel); // IW_POSITION - transformed, IW_ORIGINAL - not transformed
        RPM.gBarycentric = superImageLoad(currImages[IW_BARYCENT], curPixel);
        RPM.gIndices = floatBitsToUint(superImageLoad(currImages[IW_INDICIES], curPixel));

        // TODO: Optimize Fetching and Interpolation 
        XGEO GEO = interpolate(RPM);
        XPOL MAT = materialize(RPM, GEO);

        // 
        if (RPM.gBarycentric.w <= 9999.f && dot(RPM.gBarycentric.xyz, 1.f.xxx) > 0.000f) {
             // Use Current Frame with CheckerBoard issue fix!
            float4 indirect = max(cbLoad(IW_INDIRECT, curPixel), float4(0.f.xxx, 0.f));
            float4 refleclr = max(cbLoad(IW_REFLECLR, curPixel), float4(0.f.xxx, 0.f));
            float4 shadows  = max(cbLoad(IW_SHADOWCL, curPixel), float4(0.f.xxx, 0.f));

            //indirect += shadows;
            indirect = max(indirect, float4(0.f.xxx, 1.f));
            refleclr = max(refleclr, float4(0.f.xxx, 1.f));
            shadows = max(shadows, float4(0.f.xxx, 1.f));

            // 
            imageStore(rasteredImages[RS_INDIRECT], curPixel, indirect / indirect.w);
            imageStore(rasteredImages[RS_REFLECLR], curPixel, refleclr / refleclr.w);
            imageStore(rasteredImages[RS_ALBEDOBF], curPixel, MAT.diffuseColor);
            imageStore(rasteredImages[RS_NORMALED], curPixel, MAT.mapNormal);
        };

        //superImageStore(currImages[IW_RENDERED], curPixel, cbLoad(IW_INDIRECT, curPixel));
    };

    // 
    //for (uint i=0;i<12;i++) {
    //    const float4 pixof = superImageLoad(currImages[i], curPixel);
    //    superImageStore(prevImages[i], curPixel, pixof);
    //};

};
