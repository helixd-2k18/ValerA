#version 460 core
#extension GL_GOOGLE_include_directive : require
#define GLSL

#include "../include/driver.hlsli"
#include "../include/bindings.hlsli"

#define LAUNCH_ID GlobalInvocationID


bool checkPixel(in XHIT RPM, in int2 gpix, in bool interpolate){
    uint2 launchSize = imageSize(currImages[IW_POSITION]); launchSize.x >>= 2;
    const  int2 sizPixel = int2(launchSize);

    // 
    uint4 cIndices = floatBitsToUint(superImageLoad(currImages[IW_INDICIES], gpix));
    uint4 cBarycent = floatBitsToUint(superImageLoad(currImages[IW_BARYCENT], gpix));
    float4 cindirect = float4(superImageLoad(currImages[IW_INDIRECT], gpix).xyz, 1.f);

    // Where Will Re-Located
    float3 wPosition = RPM.origin.xyz;
    float3 screenpos = world2screen(wPosition);
    float4 worldspos = 
    interpolate ? 
        float4(texture(sampler2D(rasteredImagesRaw[RS_POSITION], staticSamplers[0u]), (screenpos.xy * 0.5f + 0.5f) * float2(sizPixel) + 0.0001f).xyz, 1.f) :
        float4(superImageLoad(currImages[IW_POSITION], gpix).xyz, 1.f);

    float3 screensmp = world2screen(worldspos.xyz);

    // 
    return (interpolate ? cindirect.w <= 0.f : false) || 
        cIndices.x == RPM.gIndices.x && cIndices.y == RPM.gIndices.y && // Same Geometry?
        (
            RPM.gBarycentric.w <= 9999.f && dot(RPM.gBarycentric.xyz, 1.f.xxx) > 0.000f && 
            abs(screenpos.z - screensmp.z) < 0.0001f && 
            distance(wPosition.xyz, worldspos.xyz) < 0.1f
        );
}


// TODO: HLSL
#ifdef GLSL
layout ( local_size_x = 32u, local_size_y = 24u ) in; 
void main() 
#else

#endif
{
#ifdef GLSL
    const uint3 GlobalInvocationID = gl_GlobalInvocationID;
    const uint3 LocalInvocationID = gl_LocalInvocationID;
    const uint LocalInvocationIndex = gl_LocalInvocationIndex;
#endif

    const uint2 lanQ = LAUNCH_ID.xy;//gl_LaunchIDEXT.xy;//gl_GlobalInvocationID.xy;
    uint2 launchSize = imageSize(currImages[IW_POSITION]); launchSize.x >>= 2;

    // 
    const int2 curPixel = int2(lanQ), invPixel = int2(curPixel.x,curPixel.y);
    const int2 sizPixel = int2(launchSize);

    // Previous Frame Indices
    uint4 wIndices = floatBitsToUint(superImageLoad(prevImages[IW_INDICIES], curPixel));
    uint globalInstanceID = wIndices.x;
    uint geometrySetID = getMeshID(globalInstanceID);
    uint geometryInstanceID = wIndices.y;
    
    // 
    GeometryDesc node;
#ifdef GLSL
    node = geometries[nonuniformEXT(geometrySetID)].data[geometryInstanceID];
#else
    node = geometries[nonuniformEXT(geometrySetID)][geometryInstanceID];
#endif

    // By Geometry Data
    float3x4 matras = float3x4(float4(1.f,0.f.xxx),float4(0.f,1.f,0.f.xx),float4(0.f.xx,1.f,0.f));
    float3x4 matra4 = instances[nonuniformEXT(globalInstanceID)].transform;
    if (hasTransform(node)) { matras = node.transform; };

    // WARNING! Quality may critically drop when move! 
    const bool checker = bool(((curPixel.x ^ curPixel.y) ^ (constants.rdata.x^1u))&1u);

    // Getting Previous Frame Sample (shows as COLOR.xyz/COLOR.w)
    float4 indirect = superImageLoad(prevImages[IW_INDIRECT], curPixel); // Pre-Multiplied with Alpha, if you want just bright sum, use zero W
    float4 shadowcl = superImageLoad(prevImages[IW_SHADOWCL], curPixel); // Pre-Multiplied with Alpha, if you want just bright sum, use zero W
    float4 refleclr = superImageLoad(prevImages[IW_REFLECLR], curPixel); // Pre-Multiplied with Alpha, if you want just bright sum, use zero W
    float4 transpar = superImageLoad(prevImages[IW_TRANSPAR], curPixel);

    // 
    float4 wPosition = float4(superImageLoad(prevImages[IW_ORIGINAL], curPixel).xyz, 1.f);
           wPosition = float4(mul(matra4, float4(mul(matras, wPosition), 1.f)), 1.f); // Transform As Current
    float3 screenpos = world2screen(wPosition.xyz);

    // 
    XHIT RPM; // currImages is Current Frame, prevImages is Previous Frame
    RPM.origin = wPosition; // IW_POSITION - transformed, IW_ORIGINAL - not transformed
    RPM.gBarycentric = superImageLoad(prevImages[IW_BARYCENT], curPixel);
    RPM.gIndices = wIndices;

    // 
    const float2 fpix = (screenpos.xy * 0.5f + 0.5f) * float2(sizPixel) + 0.0001f;
    const int2 topix = int2(fpix);
    if (indirect.w > 0.f && (checkPixel(RPM, int2(fpix), true) ||  
        checkPixel(RPM, int2(fpix)+int2(-1,0), false) || checkPixel(RPM, int2(fpix)+int2(1,0), false) || 
        checkPixel(RPM, int2(fpix)+int2(0,-1), false) || checkPixel(RPM, int2(fpix)+int2(0,1), false)
    )) 
    {
        atomicSuperImageAdd(resampleImages[IW_INDIRECT], topix, indirect); // Atomically Adding Samples
        atomicSuperImageAdd(resampleImages[IW_SHADOWCL], topix, shadowcl);
        atomicSuperImageAdd(resampleImages[IW_REFLECLR], topix, refleclr); // TODO: Adaptive Sampling For Reflections...
        atomicSuperImageAdd(resampleImages[IW_TRANSPAR], topix, transpar);
    };

};
