#version 460 core
#extension GL_GOOGLE_include_directive : require
#define GLSL

#include "../include/driver.hlsli"
#include "../include/bindings.hlsli"

#define LAUNCH_ID GlobalInvocationID

// TODO: HLSL
#ifdef GLSL
layout ( local_size_x = 32u, local_size_y = 24u ) in; 
void main() 
#else

#endif
{
#ifdef GLSL
    const uint3 GlobalInvocationID = gl_GlobalInvocationID;
    const uint3 LocalInvocationID = gl_LocalInvocationID;
    const uint LocalInvocationIndex = gl_LocalInvocationIndex;
#endif

    const uint2 lanQ = LAUNCH_ID.xy;//gl_LaunchIDEXT.xy;//gl_GlobalInvocationID.xy;
    uint2 launchSize = imageSize(currImages[IW_POSITION]); launchSize.x >>= 2;

    // 
    const int2 curPixel = int2(lanQ), invPixel = int2(curPixel.x,curPixel.y);
    const int2 sizPixel = int2(launchSize);

    // WARNING! Quality may critically drop when move! 
    const bool checker = bool(((curPixel.x ^ curPixel.y) ^ (constants.rdata.x^1u))&1u);

    {   // 
        packed = packUint2x16(curPixel),       seed = uint2(packed, constants.rdata.x);
        const float2 shift = random2(seed),   pixel = float2(invPixel)+(shift*2.f-1.f)*0.25f+0.5f;
        //const float2 shift = 0.5f.xx,       pixel = float2(invPixel)+(shift*2.f-1.f)*0.25f+0.5f;

        // 
        float3 origin = screen2world(float3((float2(pixel)/float2(sizPixel))*2.f-1.f,0.001f));
        float3 target = screen2world(float3((float2(pixel)/float2(sizPixel))*2.f-1.f,0.999f));
        float3 raydir = normalize(target - origin);
        float3 normal = float3(0.f.xxx);
        float3 geonrm = float3(0.f.xxx);

        // Replacement for rasterization
        //XHIT RPM = traceRays(    origin.xyz,           (raydir), normal, 10000.f, true, 0.001f);
          XHIT RPM = rasterize(    origin.xyz,           (raydir), normal, 10000.f, true, 0.001f);

        // TODO: Optimize Fetching and Interpolation 
        XGEO GEO = interpolate(RPM);
        XPOL MAT = materialize(RPM, GEO);
        
        // 
        if (RPM.gBarycentric.w <= 9999.f && dot(RPM.gBarycentric.xyz, 1.f.xxx) > 0.000f) {
            float4 indirect = superImageLoad(currImages[IW_INDIRECT], curPixel) + superImageLoad(resampleImages[IW_INDIRECT], curPixel);
            float4 refleclr = superImageLoad(currImages[IW_REFLECLR], curPixel); refleclr /= indirect.w; // Premultiplied alpha and has no sampling ratio

            // 
            float4 shadows = superImageLoad(currImages[IW_SHADOWCL], curPixel) + superImageLoad(resampleImages[IW_SHADOWCL], curPixel); indirect += shadows;
            float4 diffuse = float4(MAT.diffuseColor.xyz * (indirect.xyz/max(indirect.w,1.f)), 1.f);

            // 
            //diffuse.xyz = mix(diffuse.xyz, refleclr.xyz, vec3(0.f));
            diffuse.xyz += refleclr.xyz; // Already Pre-Multiplied with Coef
            superImageStore(currImages[IW_RENDERED], curPixel, diffuse);
        };
    };

    // 
    for (uint i=0;i<12;i++) {
        const float4 pixof = superImageLoad(currImages[i], curPixel);
        superImageStore(currImages[i], curPixel, pixof);
    };

    
};
