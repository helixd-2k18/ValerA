#version 460 core
#extension GL_GOOGLE_include_directive : require
#define GLSL

#include "../include/driver.hlsli"
#include "../include/bindings.hlsli"

#define LAUNCH_ID GlobalInvocationID


//
float4 bLoad(const int ID, in int2 samplep){
    return superImageLoad(currImages[ID], samplep);
};

// 
float4 rLoad(const int ID, in int2 samplep){
    return superImageLoad(resampleImages[ID], samplep);
};


// TODO: HLSL
#ifdef GLSL
layout ( local_size_x = 32u, local_size_y = 24u ) in; 
void main() 
#else

#endif
{
#ifdef GLSL
    const uint3 GlobalInvocationID = gl_GlobalInvocationID;
    const uint3 LocalInvocationID = gl_LocalInvocationID;
    const uint LocalInvocationIndex = gl_LocalInvocationIndex;
#endif

    const uint2 lanQ = LAUNCH_ID.xy;//gl_LaunchIDEXT.xy;//gl_GlobalInvocationID.xy;
    uint2 launchSize = imageSize(currImages[IW_POSITION]); launchSize.x >>= 2;

    // 
    const int2 curPixel = int2(lanQ), invPixel = int2(curPixel.x,curPixel.y);
    const int2 sizPixel = int2(launchSize);

    // WARNING! Quality may critically drop when move! 
    const bool checker = bool(((curPixel.x ^ curPixel.y) ^ (constants.rdata.x^1u))&1u);

    {   // 
        packed = packUint2x16(curPixel),       seed = uint2(packed, constants.rdata.x);
        const float2 shift = random2(seed),   pixel = float2(invPixel)+(shift*2.f-1.f)*0.25f+0.5f;
        //const float2 shift = 0.5f.xx,       pixel = float2(invPixel)+(shift*2.f-1.f)*0.25f+0.5f;

        // 
        float3 origin = screen2world(float3((float2(pixel)/float2(sizPixel))*2.f-1.f,0.001f));
        float3 target = screen2world(float3((float2(pixel)/float2(sizPixel))*2.f-1.f,0.999f));
        float3 raydir = normalize(target - origin);
        float3 normal = float3(0.f.xxx);
        float3 geonrm = float3(0.f.xxx);

        // Replacement for rasterization
        //XHIT RPM = traceRays(    origin.xyz,           (raydir), 10000.f, true, 0.001f);
        //XHIT RPM = rasterize(    origin.xyz,           (raydir), 10000.f, true, 0.001f);
        XHIT RPM; // currImages is Current Frame, prevImages is Previous Frame
        RPM.origin = superImageLoad(currImages[IW_POSITION], curPixel); // IW_POSITION - transformed, IW_ORIGINAL - not transformed
        RPM.gBarycentric = superImageLoad(currImages[IW_BARYCENT], curPixel);
        RPM.gIndices = floatBitsToUint(superImageLoad(currImages[IW_INDICIES], curPixel));

        // TODO: Optimize Fetching and Interpolation 
        XGEO GEO = interpolate(RPM);
        XPOL MAT = materialize(RPM, GEO);

        // 
        if (RPM.gBarycentric.w <= 9999.f && dot(RPM.gBarycentric.xyz, 1.f.xxx) > 0.000f) {
            // Accumulation!
            float4 indirect = max(bLoad(IW_INDIRECT, curPixel), float4(0.f.xxx, 0.f)) + max(rLoad(IW_INDIRECT, curPixel), float4(0.f.xxx, 0.f));
            float4 refleclp = max(bLoad(IW_REFLECLR, curPixel), float4(0.f.xxx, 0.f)) + max(rLoad(IW_REFLECLR, curPixel), float4(0.f.xxx, 0.f));
            float4 transpp  = max(bLoad(IW_TRANSPAR, curPixel), float4(0.f.xxx, 0.f)) + max(rLoad(IW_TRANSPAR, curPixel), float4(0.f.xxx, 0.f));
            float4 shadows  = max(bLoad(IW_SHADOWCL, curPixel), float4(0.f.xxx, 0.f));

            // 
            float4 transpr  = max(bLoad(IW_TRANSPAR, curPixel), float4(0.f.xxx, 0.f));
            float4 refleclr = max(bLoad(IW_REFLECLR, curPixel), float4(0.f.xxx, 0.f));

            // 
            indirect += shadows;
            indirect = max(indirect, float4(0.f.xxx, 0.f));
            refleclr = max(refleclr, float4(0.f.xxx, 0.f));
            shadows = max(shadows, float4(0.f.xxx, 0.f));
            transpr = max(transpr, float4(0.f.xxx, 0.f));

            // 
            //refleclr = mix(refleclp/refleclp.w, refleclr/max(refleclr.w,1.f), 0.5f.xxxx);
            transpr  = mix(transpp /transpp .w, transpr /max(transpr.w ,1.f), 0.5f.xxxx);

            // 
            superImageStore(currImages[IW_INDIRECT], curPixel, indirect);
            superImageStore(currImages[IW_REFLECLR], curPixel, refleclr);
            superImageStore(currImages[IW_SHADOWCL], curPixel, shadows);
            superImageStore(currImages[IW_TRANSPAR], curPixel, transpr);
        };

        //superImageStore(currImages[IW_RENDERED], curPixel, cbLoad(IW_INDIRECT, curPixel));

        // 
        for (uint i=0;i<12;i++) {
            const float4 pixof = superImageLoad(currImages[i], curPixel);
            superImageStore(prevImages[i], curPixel, pixof);
        };

        // Use sampled reflection as previous frame
        if (RPM.gBarycentric.w <= 9999.f && dot(RPM.gBarycentric.xyz, 1.f.xxx) > 0.000f) {
            const float4 refleclp = max(bLoad(IW_REFLECLR, curPixel), float4(0.f.xxx, 0.f)) + max(rLoad(IW_REFLECLR, curPixel), float4(0.f.xxx, 0.f));
            const float4 maximize = max(refleclp / max(refleclp.w, 1.f), float4(0.f.xxx, 0.f));
            superImageStore(prevImages[IW_REFLECLR], curPixel, max(maximize*min(refleclp.w, 65536.f), float4(0.f.xxx, 0.f)));
        };
    };

};
