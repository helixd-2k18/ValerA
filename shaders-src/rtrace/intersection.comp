#version 460 core
#extension GL_GOOGLE_include_directive : require
#define GLSL
#define ENABLE_AS

#include "../include/driver.hlsli"
#include "../include/bindings.hlsli"

#define LAUNCH_ID GlobalInvocationID
#include "../include/raytracing.hlsli"

// TODO: HLSL
#ifdef GLSL
layout ( local_size_x = 256u, local_size_y = 1u ) in; 
void main() 
#else

#endif
{
#ifdef GLSL
    const uint3 GlobalInvocationID = gl_GlobalInvocationID;
    const uint3 LocalInvocationID = gl_LocalInvocationID;
    const uint LocalInvocationIndex = gl_LocalInvocationIndex;
    const uint3 NumWorkGroups = gl_NumWorkGroups;
    const uint3 WorkGroupID = gl_WorkGroupID;
    const uint3 WorkGroupSize = gl_WorkGroupSize;
#endif

    const uint fcount = counters[RAY_COUNTER];
    const uint wcount = tiled(tiled(fcount, NumWorkGroups.x), WorkGroupSize.x) * WorkGroupSize.x;
    const uint woffset = WorkGroupID.x * wcount;
    for (uint i=0;i<wcount;i+=WorkGroupSize.x) {
        const uint gID = woffset + (i + LocalInvocationIndex);
        packed = gID, seed = uint2(packed, constants.rdata.x);
        if (gID < fcount) {
            RayData ray = rays[0u].data[gID];
            XHIT xhit = traceRays(ray.origin, ray.direct, 10000.f, true, 0.001f);

            HitData hit;
            hit.indices = xhit.gIndices.xyz;
            hit.barycentric = xhit.gBarycentric.xyz;
            //hit.rayID = gID;
            hit.dist = xhit.gBarycentric.w;
            storeHit(hit, gID); // Store at same position, as ray... (for faster results)
            //emitHit(hit);
        };
    };

};
