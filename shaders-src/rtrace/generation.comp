#version 460 core
#extension GL_GOOGLE_include_directive : require
#define GLSL
#define ENABLE_AS

#include "../include/driver.hlsli"
#include "../include/bindings.hlsli"

#define LAUNCH_ID GlobalInvocationID
#include "../include/raytracing.hlsli"


struct CurrentRay {
    vec4 origin;
    vec4 direct;
    vec4 energy;
    vec4 emission;
};


// TODO: HLSL
#ifdef GLSL
layout ( local_size_x = 32u, local_size_y = 24u ) in; 
void main() 
#else

#endif
{
#ifdef GLSL
    const uint3 GlobalInvocationID = gl_GlobalInvocationID;
    const uint3 LocalInvocationID = gl_LocalInvocationID;
    const uint LocalInvocationIndex = gl_LocalInvocationIndex;
#endif

    const Box box = { -1.f.xxx, 1.f.xxx }; // TODO: Change Coordinate
    const float3 lightc = 32.f*4096.f.xxx/(sphere.w*sphere.w);

    //const uint2 
    //uint2 lanQ = LAUNCH_ID.xy;//gl_LaunchIDEXT.xy;//gl_GlobalInvocationID.xy;

    // 
    bool checker = bool(LocalInvocationIndex / (gl_WorkGroupSize.x * gl_WorkGroupSize.y / 2));
    uint localY = (LocalInvocationIndex / gl_WorkGroupSize.x) % (gl_WorkGroupSize.y / 2);
    uint localX = LocalInvocationIndex % gl_WorkGroupSize.x;
    uint2 localXY = uint2(localX, (localY*2)+((localX&1)^uint(checker)));//LocalInvocationID.xy;
    
    // 
    uint2 lanQ = gl_WorkGroupID.xy * gl_WorkGroupSize.xy + localXY;
    uint2 launchSize = imageSize(currImages[IW_POSITION]); launchSize.x >>= 2;

    // 
    const int2 curPixel = int2(lanQ), invPixel = int2(curPixel.x,curPixel.y);
    const int2 sizPixel = int2(launchSize);

    // WARNING! Quality may critically drop when move! 
    //const bool checker = bool(((curPixel.x ^ curPixel.y) ^ (constants.rdata.x^1u))&1u);

    {
        //
        packed = packUint2x16(curPixel),       seed = uint2(packed, constants.rdata.x);
        const float2 shift = random2(seed),   pixel = float2(invPixel)+(shift*2.f-1.f)*0.25f+0.5f;
        //const float2 shift = 0.5f.xx,       pixel = float2(invPixel)+(shift*2.f-1.f)*0.25f+0.5f;

        // 
        float3 origin = screen2world(float3((float2(pixel)/float2(sizPixel))*2.f-1.f,0.001f));
        float3 target = screen2world(float3((float2(pixel)/float2(sizPixel))*2.f-1.f,0.999f));
        float3 raydir = normalize(target - origin);
        float3 normal = float3(0.f.xxx);
        float3 geonrm = float3(0.f.xxx);

        // Replacement for rasterization
        //XHIT RPM = traceRays(    origin.xyz,           (raydir), 10000.f, true, 0.0001f);
          XHIT RPM = rasterize(    origin.xyz,           (raydir), 10000.f, true, 0.0001f);

        // TODO: Optimize Fetching and Interpolation 
        XGEO GEO = interpolate(RPM);
        XPOL MAT = materialize(RPM, GEO);
        
        {   // 
            imageStore(rasteredImages[RS_POSITION], curPixel, GEO.gPosition); // For Interpolation
            superImageStore(currImages[IW_ORIGINAL], curPixel, GEO.oPosition);
            superImageStore(currImages[IW_POSITION], curPixel, RPM.origin);
            superImageStore(currImages[IW_MAPNORML], curPixel, MAT.mapNormal);
            superImageStore(currImages[IW_INDICIES], curPixel, uintBitsToFloat(RPM.gIndices));
            superImageStore(currImages[IW_GEONORML], curPixel, GEO.gNormal);
            superImageStore(currImages[IW_BARYCENT], curPixel, RPM.gBarycentric);
            superImageStore(currImages[IW_INDIRECT], curPixel, float4(0.f.xxxx));
            superImageStore(currImages[IW_SHADOWCL], curPixel, float4(0.f.xxxx));
            superImageStore(currImages[IW_REFLECLR], curPixel, float4(0.f.xxxx));
            superImageStore(currImages[IW_ADAPTIVE], curPixel, float4(0.f.xxxx));
            superImageStore(currImages[IW_TRANSPAR], curPixel, float4(0.f.xxxx));
            superImageStore(currImages[IW_RENDERED], curPixel, float4(0.f.xxxx));
            superImageStore(resampleImages[IW_REFLECLR], curPixel, float4(0.f.xxxx));

            // Nullify Resampling
            
            //atomicSuperImageAdd3(currImages[IW_RENDERED], curPixel, toLinear(float4(0.f, 0.9f, 1.f, 1.f)));
        };

        for (uint i=0;i<12;i++) {
            superImageStore(resampleImages[i], curPixel, float4(0.f.xxxx));
        };

        // 
        const float3 mapNormal = faceforward(MAT.mapNormal.xyz, raydir, GEO.gNormal.xyz);
        const float3 geoNormal = faceforward(GEO.gNormal.xyz, raydir, GEO.gNormal.xyz);
        const float3x3 TBN = float3x3(GEO.gTangent.xyz,GEO.gBinormal.xyz,mapNormal);
        
        // 
        const float inIOR = 1.f, outIOR = 1.6666f;
        const float reflectionPower = mix(clamp(pow(abs(1.0f + dot(raydir.xyz, MAT.mapNormal.xyz)), outIOR/inIOR), 0.f, 1.f) * 0.3333f, 1.f, MAT.specularColor.z);
        const bool isDiffuse = checker && reflectionPower <= 0.999f || reflectionPower < 0.001f;
        
        // global illumination
        if (RPM.gBarycentric.w <= 9999.f && dot(RPM.gBarycentric.xyz, 1.f.xxx) > 0.000f) 
        {   // 
            bool couldReflection = !isDiffuse;
            const vec3 diffuseColor = max(MAT.diffuseColor.xyz - clamp(MAT.emissionColor.xyz*MAT.emissionColor.w,0.f.xxx,1.f.xxx), 0.f.xxx);
            const vec3 reflectColor = mix(1.f.xxx, diffuseColor.xyz, isDiffuse ? 1.f.xxx : MAT.specularColor.zzz);

            // trace global illumination
            CurrentRay gpi;
            gpi.origin = vec4(RPM.origin.xyz, 1.f);
            gpi.direct = vec4(normalize(raydir.xyz), 1.f);
            gpi.energy = vec4(isDiffuse ? vec3(1.f.xxx) : reflectColor, 1.f);
            gpi.emission = vec4(0.f.xxx, 1.f);

            // reflection coefficient
            for (uint32_t i=0;i<3;i++) {
                const float3 mapNormal = normalize(faceforward(MAT.mapNormal.xyz, gpi.direct.xyz, GEO.gNormal.xyz));
                const float3 geoNormal = normalize(faceforward(GEO.gNormal.xyz, gpi.direct.xyz, GEO.gNormal.xyz));
                const float3x3 TBN = float3x3(GEO.gTangent.xyz,GEO.gBinormal.xyz,mapNormal);
                const bool pReflection = couldReflection;

                // reflect or refract rays
                gpi.direct = vec4(normalize(pReflection ? reflectGlossy(seed, gpi.direct.xyz, TBN, MAT.specularColor.y) : randomHemisphereCosine(seed, TBN)), 0.f);
                gpi.origin = vec4(gpi.origin.xyz + geoNormal * 0.0001f, 1.f);

                // trace shadows
                if (!pReflection) 
                {   // 
                    CurrentRay gpi = gpi;
                    gpi.direct = vec4(0.f.xxx, 1.f);
                    gpi.emission = vec4(0.f.xxx, 0.f);
                    directLight(mapNormal, geoNormal, gpi.origin.xyz, seed, gpi.emission, gpi.energy);

                    // 
                    if (gpi.emission.w > 0.f) {
                        atomicSuperImageAdd(currImages[nonuniformEXT(isDiffuse ? IW_INDIRECT : IW_REFLECLR)], int2(lanQ), float4(min(gpi.emission, float4(8.f.xxx, 1.f))));
                    };
                };

                // trace rays
                {
                    XHIT RPM = traceRays(gpi.origin.xyz, normalize(gpi.direct.xyz), 10000.f, true, 0.0001f);
                    GEO = interpolate(RPM);
                    MAT = materialize(RPM, GEO);

                    // colorize results
                    const float reflectionPower = mix(clamp(pow(abs(1.0f + dot(gpi.direct.xyz, MAT.mapNormal.xyz)), outIOR/inIOR), 0.f, 1.f) * 0.3333f, 1.f, MAT.specularColor.z);
                    const vec3 diffuseColor = max(MAT.diffuseColor.xyz - clamp(MAT.emissionColor.xyz*MAT.emissionColor.w,0.f.xxx,1.f.xxx), 0.f.xxx);
                    const vec3 reflectColor = mix(1.f.xxx, diffuseColor.xyz, (couldReflection = random(seed) <= reflectionPower) ? MAT.specularColor.zzz : 1.f.xxx);

                    // 
                    gpi.origin = vec4(RPM.origin.xyz, 1.f);
                    gpi.emission = float4(gpi.energy) * float4(MAT.emissionColor.xyz * MAT.emissionColor.w, 1.f);
                    gpi.energy.xyz = float3(gpi.energy.xyz) * reflectColor;

                    // too dim, so break
                    if (dot(gpi.energy.xyz, 1.f.xxx) < 0.001f || !(RPM.gBarycentric.w <= 9999.f && dot(RPM.gBarycentric.xyz, 1.f.xxx) > 0.000f)) { break; };
                };

                
            };

            // rise-back original material and geometry data
            GEO = interpolate(RPM);
            MAT = materialize(RPM, GEO);

            // 
            //atomicSuperImageAdd(currImages[IW_INDIRECT], int2(lanQ), float4(min(gpi.emission, float4(8.f.xxx, 1.f))));
            atomicSuperImageAdd(currImages[nonuniformEXT(isDiffuse ? IW_INDIRECT : IW_REFLECLR)], int2(lanQ), float4(min(gpi.emission, float4(8.f.xxx, 1.f))));

            // trace transparency
            /* // Too stupid tracing, needs GI-tracing
            if (MAT.diffuseColor.w > 0.0001f && MAT.diffuseColor.w < 0.999f) 
            {   // 
                CurrentRay gpi;
                gpi.direct = vec4(raydir, 0.f);
                gpi.origin = vec4(RPM.origin.xyz + faceforward(GEO.gNormal.xyz, gpi.direct.xyz, -GEO.gNormal.xyz) * 0.0001f, 1.f);
                gpi.energy = vec4(isReflection ? MAT.diffuseColor.xyz : vec3(1.f.xxx), 1.f);
                gpi.emission = vec4(0.f.xxx, 1.f);

                // 
                XHIT RPM = traceRays(gpi.origin.xyz, gpi.direct.xyz, 10000.f, true, 0.001f);
                XGEO GEO = interpolate(RPM);
                XPOL MAT = materialize(RPM, GEO);

                //
                atomicSuperImageAdd(currImages[nonuniformEXT(IW_TRANSPAR)], int2(lanQ), float4(min(gpi.emission, float4(8.f.xxx, 1.f))));
            };
            */
            
        } else 
        {   // skybox coloring
            atomicSuperImageAdd(currImages[nonuniformEXT(IW_INDIRECT)], int2(lanQ), float4(min(gSkyShader(raydir.xyz, RPM.origin.xyz), float4(8.f.xxx, 1.f))));
        };
    };

};
